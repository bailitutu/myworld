
// 1.sql注入
//     sql注入就是通过给web应用接口传入一些特殊字符，达到欺骗服务器执行恶意sql命令；
//     原因： 当使用外部不可信任的数据去哦为参数进行数据库的增删改查是，如果未对外部数据惊醒过滤就会缠上sql注入漏洞；


/*
2.xss攻击

XSS 攻击全称跨站脚本攻击（Cross-Site Scripting），简单的说就是攻击者通过在目标网站上注入恶意脚本并运行，获取用户的敏感信息如 Cookie、SessionID 等，影响网站与用户数据安全。

XSS 攻击更偏向前端的范畴，但后端在保存数据的时候也需要对数据进行安全过滤。

原因
当攻击者通过某种方式向浏览器页面注入了恶意代码，并且浏览器执行了这些代码。

比如：

在一个文章应用中（如微信文章），攻击者在文章编辑后台通过注入script标签及js代码，后端未加过滤就保存到数据库，前端渲染文章详情的时候也未加过滤，这就会让这段js代码执行，引起 XSS 攻击。

解决方案
一个基本的思路是渲染前端页面（不管是客户端渲染还是服务器端渲染）或者动态插入 HTML 片段时，任何数据都不可信任，都要先做 HTML 过滤，然后再渲染。

*/


// 3.CSRF 攻击
// CSRF 攻击全称跨站请求伪造（Cross-site Request Forgery），简单的说就是攻击者盗用了你的身份，以你的名义发送恶意请求。

/*原因
一个典型的 CSRF 攻击有着如下的流程：

受害者登录 a.com，并保留了登录凭证（Cookie）

攻击者引诱受害者访问了 b.com

b.com 向 a.com 发送了一个请求： a.com/act=xx（浏览器会默认携带 a.com 的 Cookie）

a.com 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求

a.com 以受害者的名义执行了 act=xx

攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 a.com 执行了自己定义的操作



解决方案
防止 CSRF 攻击需要在服务器端入手，基本的思路是能正确识别是否是用户发起的请求。

参考《前端安全系列之二：如何防止CSRF攻击？ - 防护策略》*/





